strip-units()
  unit(arguments, '')
add-braces()
  join('', '(', arguments, ')')
add-quotes()
  join('', arguments)
create-string()
  join(', ', arguments)
create-prop()
  unquote( join('', arguments) )
create-val()
  unquote( join('', arguments) )
create-block()
  unquote( join(' ', arguments) )
create-object()
  join('', '{', arguments, '}')
create-list()
  unquote( join(', ', arguments) )
create-array()
  join('', '["', arguments, '"]')
create-key()
  join('', '"', arguments, '":')
create-value()
  join('', '"', arguments, '"')
__mixer = json('../config.json', { hash: true, leave-strings: true })
__mixer_keys = \
  autoPrefixer, browsers, autoImportant, autoReset, autoNormalize, tabletBreakpoint, mobileBreakpoint, overwriteColors
mixer ?= __mixer
for key in __mixer_keys
  unless( mixer[key] )
    mixer[key] = __mixer[key]
configurePlugins( mixer )
reset()
  html, body, div, span, applet, object, iframe,
  h1, h2, h3, h4, h5, h6, p, blockquote, pre,
  a, abbr, acronym, address, big, cite, code,
  del, dfn, em, img, ins, kbd, q, s, samp,
  small, strike, strong, sub, sup, tt, var,
  b, u, i, center,
  dl, dt, dd, ol, ul, li,
  fieldset, form, label, legend,
  table, caption, tbody, tfoot, thead, tr, th, td,
  article, aside, canvas, details, embed,
  figure, figcaption, footer, header, hgroup,
  menu, nav, output, ruby, section, summary,
  time, mark, audio, video
    margin 0
    padding 0
    border 0
    font-size 100%
    font inherit
    vertical-align baseline
  article, aside, details, figcaption, figure,
  footer, header, hgroup, menu, nav, section
    display block
  body
    line-height 1
  ol, ul
    list-style none
  blockquote, q
    quotes none
  blockquote:before, blockquote:after,
  q:before, q:after
    content ''
    content none
  table
    border-collapse collapse
    border-spacing 0
  *
  *:before
  *:after
    box-sizing border-box
reset() if auto-reset == "all"
reset-basics()
  @charset "UTF-8"
  html, body, div, span, iframe
  h1, h2, h3, h4, h5, h6, p
  blockquote, pre, strong, em, u
  form, label, ul, ol, li
  header, footer, menu, nav
  section, article, title
  audio, video, img
  iframe, embed
  a, button
    margin 0
    padding 0
    border 0
  *
  *:before
  *:after
    box-sizing border-box
reset-basics() if auto-reset == "basics"
normalize()
  html
    font-family sans-serif
    font-size 100%
    -ms-text-size-adjust 100%
    -webkit-text-size-adjust 100%
  body
    margin 0
  article,
  aside,
  details,
  figcaption,
  figure,
  footer,
  header,
  main,
  menu,
  nav,
  section,
  summary
    display block
  h1, h2, h3, h4, h5, h6, p
  a, button, ul, ol, li, label
    -webkit-font-smoothing antialiased
    -moz-osx-font-smoothing grayscale
  audio, canvas, progress, video
    display inline-block
    vertical-align baseline
  audio
    &:not([controls])
      display none
      height 0
  [hidden], template
    display none
  a
    background-color transparent
  a:active
  a:hover
    outline 0
  a, button
    text-decoration none
    border none
    outline none
  a:hover
  button:hover
    cursor pointer
  abbr[title]
    border-bottom none
    text-decoration underline
    text-decoration underline dotted
  b, strong
    font-weight inherit
    font-weight bolder
  dfn
    font-style italic
  h1
    font-size 2em
    margin 0.67em 0
  mark
    background-color #ff0
    color #000
  small
    font-size 80%
  sub, sup
    font-size 75%
    line-height 0
    position relative
    vertical-align baseline
  sup
    top -0.5em
  sub
    bottom -0.25em
  img
    border 0
  svg:not(:root)
    overflow hidden
  figure
    margin 1em 40px
  hr
    box-sizing content-box
    height 0
    overflow visible
  pre
    overflow auto
  code, kbd, pre, samp
    font-family monospace, monospace
    font-size 1em
  button, input, optgroup, select, textarea
    font inherit
    margin 0
  button
    overflow visible
  button,
  select
    text-transform none
  button
  html input[type="button"]
  input[type="reset"]
  input[type="submit"]
    -webkit-appearance button
    cursor pointer
  button[disabled]
  html input[disabled]
    cursor default
  button::-moz-focus-inner
  input::-moz-focus-inner
    border 0
    padding 0
  button:-moz-focusring
  input:-moz-focusring
    outline 1px dotted ButtonText
  input
    line-height normal
  input[type="checkbox"]
  input[type="radio"]
    box-sizing border-box
    padding 0
  input[type="number"]::-webkit-inner-spin-button
  input[type="number"]::-webkit-outer-spin-button
    height auto
  input[type="search"]
    -webkit-appearance textfield
  input[type="search"]::-webkit-search-cancel-button
  input[type="search"]::-webkit-search-decoration
    -webkit-appearance none
  fieldset
    border 1px solid #c0c0c0
    margin 0 2px
    padding 0.35em 0.625em 0.75em
  legend
    border 0
    padding 0
  textarea
    overflow auto
  optgroup
    font-weight bold
normalize() if auto-normalize == "all"
normalize-basics()
  html
    font-family sans-serif
    font-size 100%
    -ms-text-size-adjust 100%
    -webkit-text-size-adjust 100%
  h1, h2, h3, h4, h5, h6, p
  a, button, ul, ol, li, label
    -webkit-font-smoothing antialiased
    -moz-osx-font-smoothing grayscale
  a, button
    text-decoration none
    border none
    outline none
  a:hover
  button:hover
    cursor pointer
normalize-basics() if auto-normalize == "basics"
$red    = hsl(0, 95%, 55%)
$green  = hsl(96, 61%, 53%)
$blue   = hsl(200, 96%, 44%)
$yellow = hsl(51, 94%, 52%)
$gray1 = hsl(0,0%,10%)
$gray2 = hsl(0,0%,20%)
$gray3 = hsl(0,0%,30%)
$gray4 = hsl(0,0%,40%)
$gray5 = hsl(0,0%,50%)
$gray6 = hsl(0,0%,60%)
$gray7 = hsl(0,0%,70%)
$gray8 = hsl(0,0%,80%)
$gray9 = hsl(0,0%,90%)
$saphire       = hsl(181, 100%, 38%)
$green-sea     = hsl(169, 100%, 33%)
$teal          = hsl(168, 100%, 38%)
$niagara       = hsl(172, 100%, 36%)
$forest-green  = hsl(152, 100%, 36%)
$emerald       = hsl(152, 100%, 42%)
$spring-grass  = hsl(96, 61%, 53%)
$squeezed-lime = hsl(77, 69%, 53%)
$cream-can     = hsl(47, 66%, 63%)
$ripe-lemon    = hsl(51, 94%, 52%)
$sunflower     = hsl(49, 100%, 48%)
$orange        = hsl(36, 100%, 50%)
$fire-bush     = hsl(21, 86%, 55%)
$carrot        = hsl(29, 100%, 47%)
$pumpkin       = hsl(17, 100%, 44%)
$pomegranate   = hsl(356, 93%, 42%)
$valencia      = hsl(3, 84%, 58%)
$alizarin      = hsl(359, 94%, 55%)
$red-delicious = hsl(0, 100%, 50%)
$candy-caane   = hsl(345, 100%, 50%)
$ice-cream     = hsl(332, 100%, 50%)
$pink          = hsl(332, 100%, 50%)
$lavender      = hsl(291, 48%, 64%)
$amethyst      = hsl(292, 48%, 48%)
$wisteria      = hsl(293, 73%, 39%)
$purple        = hsl(292, 48%, 48%)
$navy          = hsl(246, 55%, 50%)
$fairyland     = hsl(200, 96%, 44%)
$shakespeare   = hsl(196, 51%, 64%)
$aqua          = hsl(181, 45%, 58%)
$lynch         = hsl(201, 30%, 62%)
$silver        = hsl(202, 9%, 76%)
$concrete      = hsl(180, 7%, 52%)
$midnight-blue = hsl(211, 32%, 24%)
$black         = hsl(190, 6%, 19%)
$macchiato     = hsl(33, 40%, 44%)
$latte         = hsl(38, 39%, 64%)
$dark-cream    = hsl(40, 18%, 67%)
$brown         = hsl(33, 40%, 44%)
if overwrite-colors
  red    = $red
  green  = $green
  blue   = $blue
  yellow = $yellow
  gray1 = $gray1
  gray2 = $gray2
  gray3 = $gray3
  gray4 = $gray4
  gray5 = $gray5
  gray6 = $gray6
  gray7 = $gray7
  gray8 = $gray8
  gray9 = $gray9
  saphire       = $saphire
  green-sea     = $green-sea
  teal          = $teal
  niagara       = $niagara
  forest-green  = $forest-green
  emerald       = $emerald
  spring-grass  = $spring-grass
  squeezed-lime = $squeezed-lime
  cream-can     = $cream-can
  ripe-lemon    = $ripe-lemon
  sunflower     = $sunflower
  orange        = $orange
  fire-bush     = $fire-bush
  carrot        = $carrot
  pumpkin       = $pumpkin
  pomegranate   = $pomegranat
  valencia      = $valencia
  alizarin      = $alizarin
  red-delicious = $red-delicious
  candy-caane   = $candy-caane
  ice-cream     = $ice-cream
  pink          = $pink
  lavender      = $lavender
  amethyst      = $amethyst
  wisteria      = $wisteria
  purple        = $purple
  navy          = $navy
  fairyland     = $fairyland
  shakespeare   = $shakespeare
  aqua          = $aqua
  lynch         = $lynch
  silver        = $silver
  concrete      = $concrete
  midnight-blue = $midnight-blue
  black         = $black
  macchiato     = $macchiato
  latte         = $latte
  dark-cream    = $dark-cream
  brown         = $brown
easeInQuad     = cubic-bezier(0.550, 0.085, 0.680, 0.530)
easeInCubic    = cubic-bezier(0.550, 0.055, 0.675, 0.190)
easeInQuart    = cubic-bezier(0.895, 0.030, 0.685, 0.220)
easeInQuint    = cubic-bezier(0.755, 0.050, 0.855, 0.060)
easeInSine     = cubic-bezier(0.470, 0.000, 0.745, 0.715)
easeInExpo     = cubic-bezier(0.950, 0.050, 0.795, 0.035)
easeInCirc     = cubic-bezier(0.600, 0.040, 0.980, 0.335)
easeInBack     = cubic-bezier(0.600, -0.28, 0.735, 0.045)
easeOutQuad    = cubic-bezier(0.250, 0.460, 0.450, 0.940)
easeOutCubic   = cubic-bezier(0.215, 0.610, 0.355, 1.000)
easeOutQuart   = cubic-bezier(0.165, 0.840, 0.440, 1.000)
easeOutQuint   = cubic-bezier(0.230, 1.000, 0.320, 1.000)
easeOutSine    = cubic-bezier(0.390, 0.575, 0.565, 1.000)
easeOutExpo    = cubic-bezier(0.190, 1.000, 0.220, 1.000)
easeOutCirc    = cubic-bezier(0.075, 0.820, 0.165, 1.000)
easeOutBack    = cubic-bezier(0.175, 0.885, 0.320, 1.275)
easeInOutQuad  = cubic-bezier(0.455, 0.030, 0.515, 0.955)
easeInOutCubic = cubic-bezier(0.645, 0.045, 0.355, 1.000)
easeInOutQuart = cubic-bezier(0.770, 0.000, 0.175, 1.000)
easeInOutQuint = cubic-bezier(0.860, 0.000, 0.070, 1.000)
easeInOutSine  = cubic-bezier(0.445, 0.050, 0.550, 0.950)
easeInOutExpo  = cubic-bezier(1.000, 0.000, 0.000, 1.000)
easeInOutCirc  = cubic-bezier(0.785, 0.135, 0.150, 0.860)
easeInOutBack  = cubic-bezier(0.680, -0.55, 0.265, 1.550)
scr = 'only screen and'
small = (mobile-breakpoint - 1)
small = join('', 'max-width:', small)
small = add-braces(small)
small = join(' ', scr, small)
small = unquote(small)
medium = (tablet-breakpoint - 1)
medium = join('', 'max-width:', medium)
medium = add-braces(medium)
medium = join(' ', scr, medium)
medium = unquote(medium)
large = tablet-breakpoint
large = join('', 'min-width:', large)
large = add-braces(large)
large = join(' ', scr, large)
large = unquote(large)
mobile = (mobile-breakpoint - 1)
mobile = join('', 'max-device-width:', mobile)
mobile = add-braces(mobile)
mobile = join(' ', scr, mobile)
mobile = unquote(mobile)
tablet = (tablet-breakpoint - 1)
tablet = join('', 'max-device-width:', tablet)
tablet = add-braces(tablet)
tablet = join(' ', scr, tablet)
tablet = unquote(tablet)
desktop = tablet-breakpoint
desktop = join('', 'min-device-width:', desktop)
desktop = add-braces(desktop)
desktop = join(' ', scr, desktop)
desktop = unquote(desktop)
__ease()
  type = called-from
  strength = unit(arguments, '')
  if type == 'easeIn'
    x1 = (strength / 100)
    x2 = 0
    y1 = 1
    y2 = ( (100 - strength) / 100 )
  else if type == 'easeOut'
    x1 = 0
    x2 = (strength/100)
    y1 = ( (100 - strength) / 100)
    y2 = 1
  else
    x1 = (strength / 100)
    x2 = 0
    y1 = ( (100 - strength) / 100 )
    y2 = 1
  cubic-bezier(x1, x2, y1, y2)
easeIn()
  __ease(arguments)
easeOut()
  __ease(arguments)
easeInOut()
  __ease(arguments)
ease = easeInOut
__convert(size, base)
  base = strip-units(base)
  values = ()
  for index in size
    val = strip-units(index)
    val = val/base
    val = unit(val, called-from)
    push(values, val)
  values
em(size, base = 16)
  __convert(size, base)
rem(size, base = 16)
  __convert(size, base)
percent(value, total)
  value = strip-units(value)
  total = strip-units(total)
  (value/total) * 100%
percentage = percent
random(min,max)
  return floor( math(0, 'random')*(max - min + 1) + min )
transparent()
  rgba(arguments[0], arguments[1])
animate(options, keyframes...)
  optionsCheck = join(', ', options)
  customNameAvailable = true
  if (
    match('^\d|^ease|^bounce|^elastic|^linear|^infinite|^normal|^alternate|^forwards|^backwards|^both|^steps\(|^continuous', optionsCheck)
  )
    customNameAvailable = false
  continuousAvailable = false
  if ( match('continuous', optionsCheck) )
    continuousAvailable = true
  if ( customNameAvailable )
    name = options[0]
  else
    selector = selector()
    selector = \
      replace(':before|:after|:hover|:active|:visited|:target', '', selector)
    selector = replace('.*[^a-zA-Z]+', '', selector)
    string = replace('\W', ' ', selector)
    name = unquote(selector)
  if ( continuousAvailable )
    if ( match(':hover|:active', selector()) )
      options = join(' ', options)
      options = replace(' continuous|continuous ', '', options)
      options = unquote(options)
      selector = replace(':hover|:active', '', selector())
      / {selector}
        animation name 0ms 100ms
    else
      error('continuous is available only for :hover and :active pseudo selectors')
  if ( customNameAvailable )
    animation options
  else
    animation name options
  @keyframes {name}
    for keyframe, n in keyframes
      keyframeCheck = join(', ', keyframe)
      percentageAvailable = false
      if ( match('^\d', keyframeCheck) )
        percentageAvailable = true
      transformAvailable = false
      if ( match('translate|\brotate|\bscale|skew', keyframeCheck) )
        transformAvailable = true
      filterAvailable = false
      if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', keyframeCheck) )
        filterAvailable = true
      if (percentageAvailable == true)
        percentage = keyframe[0]
      else
        if (length(keyframes) > 1)
          percentage = (100 / ( ( length(keyframes) - 1) / n) ) * 1%
        else
          percentage = 0%
      {percentage}
        transformProps = {}
        filterProps = {}
        for prop, n in keyframe
          propCheck = join(', ', prop)
          isPercentage = false
          if ( match('^\d', propCheck) )
            isPercentage = true
          isTransform = false
          if ( match('^translate|^rotate|^scale|^skew ', propCheck) )
            isTransform = true
          isFilter = false
          if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', propCheck) )
            isFilter = true
          isEasing = false
          if ( match('ease|cubic-bezier', propCheck) )
            isEasing = true
          if ( isTransform )
            transformProps[n] = prop
          else
            transformProps[n] = unquote('')
          if ( isFilter )
            filterProps[n] = prop
          else
            filterProps[n] = unquote('')
          if ( isEasing )
            animation-timing-function prop
          if ( !isPercentage && !isTransform && !isFilter && !isEasing )
            regularProp = split('(', '' + prop)
            regularValue = split(')', '' + regularProp[1])
            printProp = unquote(regularProp[0])
            printValue = unquote(regularValue[0])
            {printProp} printValue
        if ( transformAvailable )
          transform transformProps
        if ( filterAvailable )
          filter filterProps
antialias()
  -webkit-font-smoothing antialiased
  -moz-osx-font-smoothing grayscale
clockhand()
  if length(arguments) > 4
    error("Clockhand property support up to 4 values at a time.")
  sides = top, right, bottom, left
  for side, n in sides
    if length(arguments) == 1
      {side} arguments
    else if length(arguments) == 2
      {side} arguments[0] if n == 0 || n == 2 unless arguments[0] == '_'
      {side} arguments[1] if n == 1 || n == 3 unless arguments[1] == '_'
    else if length(arguments) == 3
      {side} arguments[0] if n == 0 unless arguments[0] == '_'
      {side} arguments[1] if n == 1 || n == 3 unless arguments[1] == '_'
      {side} arguments[2] if n == 2 unless arguments[2] == '_'
    else
      {side} arguments[n] unless arguments[n] == '_'
trbl = tblr = clockhand
everything()
  *
  *:before
  *:after
    {block}
    &::-webkit-input-placeholder
      {block}
    &:-moz-placeholder
      {block}
    &::-moz-placeholder
      {block}
    &:-ms-input-placeholder
      {block}
font-face( name, font-src, weight = false, style = false, formats = local eot woff2 woff truetype svg, svg-font-name = false, local-font-name = false )
  @font-face
    font-family name
    if weight
      font-weight weight
    if style
      font-style style
    fonts = ()
    if local in formats
      local-name = local-font-name ? local-font-name : name
      push(fonts, 'local("' + local-name + '")')
    if eot in formats
      src: url( font-src + ".eot" )
      push( fonts, 'url("' + font-src + '.eot?#iefix") format("embedded-opentype")' )
    if woff2 in formats
      push( fonts, 'url("' + font-src + '.woff2") format("woff2")' )
    if woff in formats
      push( fonts, 'url("' + font-src + '.woff") format("woff")' )
    if opentype in formats || otf in formats
      push( fonts, 'url("' + font-src + '.otf") format("opentype")' )
    if truetype in formats || ttf in formats
      push( fonts, 'url("' + font-src + '.ttf") format("truetype")' )
    if svg in formats
      svg-name = svg-font-name ? svg-font-name : name
      push( fonts, 'url("' + font-src + '.svg#' + svg-name + '") format("svg")' )
    src unquote( join( ", ", fonts ) )
sliderThumb()
  if selector() == "&"
    error( "placeholder() must be called from a ruleset!" )
  &::-webkit-slider-thumb
    -webkit-appearance none
    {block}
  &::-moz-range-thumb
    {block}
  &::-ms-thumb
    {block}
  &::-ms-track
    background transparent
    border-color transparent
    color transparent
sliderTrack()
  if selector() == "&"
    error( "placeholder() must be called from a ruleset!" )
  &::-ms-track
    background transparent
    border-color transparent
    color transparent
  &::-webkit-slider-runnable-track
    {block}
  &::-moz-range-track
    {block}
  &::-ms-track
    {block}
-pos(type, args)
  position type
  if length(args) > 4
    error("Position property support up to 4 values at a time.")
  argsString = create-string(args)
  if match('top|bottom|left|right', argsString)
    for arg in args
      {arg} 0
  else
    sides = top, right, bottom, left
    for side, n in sides
      if length(args) == 1
        {side} args
      else if length(args) == 2
        {side} args[0] if n == 0 || n == 2 unless args[0] == '_'
        {side} args[1] if n == 1 || n == 3 unless args[1] == '_'
      else if length(args) == 3
        {side} args[0] if n == 0 unless args[0] == '_'
        {side} args[1] if n == 1 || n == 3 unless args[1] == '_'
        {side} args[2] if n == 2 unless args[2] == '_'
      else
        {side} args[n] unless args[n] == '_'
fixed()
  -pos(fixed, arguments)
absolute()
  -pos(absolute, arguments)
relative()
  -pos(relative, arguments)
static()
  -pos(static, arguments)
placeholder()
  if selector() == "&"
    error( "placeholder() must be called from a ruleset!" )
  &::-webkit-input-placeholder
    {block}
  &:-moz-placeholder
    {block}
  &::-moz-placeholder
    {block}
  &:-ms-input-placeholder
    {block}
pseudo()
  ^[-1]:{arguments}^[-1..-1]
    {block}
real-height()
  args = strip-units(arguments)
  height args * 1vh
  @media tablet
    ratios = '3/4', '2/3', '10/16', '9/16'
    for ratio in ratios
      @media only screen and \
             (max-device-aspect-ratio: unquote(ratio)) and \
             (orientation: portrait)
        height round( (args / convert(ratio) ), 2) * 1vw
    for ratio in ratios
      @media only screen and \
             (max-device-aspect-ratio: unquote(ratio)) and \
             (orientation: landscape)
        height round( (args * convert(ratio) ), 2) * 1vw
size()
  if length(arguments) > 2
    error("Size property support up to 2 values at a time.")
  if length(arguments) == 1
    args = join(', ',arguments)
    if match('vu?', args)
      args = replace('vu', '', args)
      args = unquote(args)
      width args + 'vw'
      height args + 'vh'
    else
      width arguments
      height arguments
  else
    width arguments[0]
    height arguments[1]
spring-from(options, strength, elasticity, props)
  optionsCheck = join(', ', options)
  customNameAvailable = true
  if (
    match('^\d|^cubic|^ease|^linear|^infinite|^normal|^alternate|^forwards|^backwards|^both|^steps\(|^continuous', optionsCheck)
  )
    customNameAvailable = false
  continuousAvailable = false
  if ( match('continuous', optionsCheck) )
    continuousAvailable = true
  if ( customNameAvailable )
    name = options[0]
  else
    selector = selector()
    selector = \
      replace(':before|:after|:hover|:active|:visited|:target', '', selector)
    selector = replace('.*[^a-zA-Z]+', '', selector)
    string = replace('\W', ' ', selector)
    name = unquote(selector)
  if ( continuousAvailable )
    if ( match(':hover|:active', selector()) )
      options = join(' ', options)
      options = replace(' continuous|continuous ', '', options)
      options = unquote(options)
      selector = replace(':hover|:active', '', selector())
      / {selector}
        animation name 0ms 100ms
    else
      error('continuous is available only for :hover and :active pseudo selectors')
  if ( customNameAvailable )
    animation options
  else
    animation name options
  coefficient = ( (strength * elasticity) + ( (strength + elasticity) / 2 ) - ( (strength + elasticity) / 4 ) / 2 )
  coefficient = ( coefficient / (-100) )
  steps = strength
  @keyframes {name}
    for step, n in 0...steps
      percentage = 100 / steps * step
      percentage = round( percentage, 2 )
      percentage = percentage * 1%
      keyframeCheck = join(', ', props)
      transformAvailable = false
      if ( match('translate|\brotate|\bscale|skew', keyframeCheck) )
        transformAvailable = true
      filterAvailable = false
      if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', keyframeCheck) )
        filterAvailable = true
      {percentage}
        transformProps = {}
        filterProps = {}
        for prop, n in props
          propCheck = join(', ', prop)
          isTransform = false
          if ( match('^translate|^rotate|^scale|^skew ', propCheck) )
            isTransform = true
          isFilter = false
          if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', propCheck) )
            isFilter = true
          if ( isTransform )
            split = split('(', '' + prop)
            transformValue = split(')', '' + split[1])
            transformValue = convert(transformValue)
            originalValue = @transform
            originalValue = split(split[0], '' + originalValue)
            originalValue = split('(', '' + originalValue[1])
            originalValue = split(')', '' + originalValue[1])
            originalValue = convert(originalValue)
            if ( originalValue == null )
              if ( split[0] == 'scale' )
                originalValue = 1
              else
                originalValue = 0
            if (transformValue == 0 && split[0] == 'scale' && percentage != '0%')
              transformValue = 0.01
            newValue = originalValue - ((transformValue - originalValue) * (coefficient ** step) * (-1))
            if (split[0] == 'scale')
              if ( transformValue <= 1 )
                newValue = originalValue + ((transformValue - originalValue) * (coefficient ** step))
            newValue = round( newValue, 2)
            newProp = join('', split[0], '(', newValue, ')')
            transformProps[n] = unquote(newProp)
          else
            transformProps[n] = unquote('')
            if ( percentage == '0%' )
              if ( isFilter )
                filterProps[n] = prop
              else
                filterProps[n] = unquote('')
                regularProp = split('(', '' + prop)
                regularValue = split(')', '' + regularProp[1])
                printProp = unquote(regularProp[0])
                printValue = unquote(regularValue[0])
                {printProp} printValue
            half = ceil(steps/2)
            if ( step == half )
              if ( isFilter )
                filterProps = unquote('inherit')
              else
                regularProp = split('(', '' + prop)
                printProp = unquote(regularProp[0])
                {printProp} inherit
        if ( transformAvailable )
          transform transformProps
        if ( filterAvailable && length(filterProps) > 0 )
          filter filterProps
spring-in-place(options, strength, elasticity, props)
  optionsCheck = join(', ', options)
  customNameAvailable = true
  if (
    match('^\d|^cubic|^ease|^linear|^infinite|^normal|^alternate|^forwards|^backwards|^both|^steps\(|^continuous', optionsCheck)
  )
    customNameAvailable = false
  continuousAvailable = false
  if ( match('continuous', optionsCheck) )
    continuousAvailable = true
  if ( customNameAvailable )
    name = options[0]
  else
    selector = selector()
    selector = \
      replace(':before|:after|:hover|:active|:visited|:target', '', selector)
    selector = replace('.*[^a-zA-Z]+', '', selector)
    string = replace('\W', ' ', selector)
    name = unquote(selector)
  if ( continuousAvailable )
    if ( match(':hover|:active', selector()) )
      options = join(' ', options)
      options = replace(' continuous|continuous ', '', options)
      options = unquote(options)
      selector = replace(':hover|:active', '', selector())
      / {selector}
        animation name 0ms 100ms
    else
      error('continuous is available only for :hover and :active pseudo selectors')
  if ( customNameAvailable )
    animation options
  else
    animation name options
  coefficient = ( (strength * elasticity) + ( (strength + elasticity) / 2 ) - ( (strength + elasticity) / 4 ) / 2 )
  coefficient = ( coefficient / (-100) )
  steps = strength
  @keyframes {name}
    for step, n in 1..(steps - 1)
      percentage = 100 / steps * step
      percentage = round( percentage, 2 )
      percentage = percentage * 1%
      keyframeCheck = join(', ', props)
      transformAvailable = false
      if ( match('translate|\brotate|\bscale|skew', keyframeCheck) )
        transformAvailable = true
      filterAvailable = false
      if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', keyframeCheck) )
        filterAvailable = true
      {percentage}
        transformProps = {}
        filterProps = {}
        for prop, n in props
          propCheck = join(', ', prop)
          isTransform = false
          if ( match('^translate|^rotate|^scale|^skew ', propCheck) )
            isTransform = true
          isFilter = false
          if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', propCheck) )
            isFilter = true
          if ( isTransform )
            split = split('(', '' + prop)
            transformValue = split(')', '' + split[1])
            transformValue = convert(transformValue)
            originalValue = @transform
            originalValue = split(split[0], '' + originalValue)
            originalValue = split('(', '' + originalValue[1])
            originalValue = split(')', '' + originalValue[1])
            originalValue = convert(originalValue)
            if ( originalValue == null )
              if ( split[0] == 'scale' )
                originalValue = 1
              else
                originalValue = 0
            if (transformValue == 0 && split[0] == 'scale' && percentage != '0%')
              transformValue = 0.01
            newValue = originalValue - ((originalValue - transformValue) * (coefficient ** step) * (-1)) * 2
            if (split[0] == 'scale')
              if ( transformValue <= 1 )
                newValue = originalValue + ((originalValue - transformValue) * (coefficient ** step)) * 2
            newValue = round( newValue, 2)
            newProp = join('', split[0], '(', newValue, ')')
            transformProps[n] = unquote(newProp)
          else
            transformProps[n] = unquote('')
            half = floor(steps/2)
            if ( step == half )
              if ( isFilter )
                filterProps[n] = prop
              else
                filterProps[n] = unquote('')
                regularProp = split('(', '' + prop)
                regularValue = split(')', '' + regularProp[1])
                printProp = unquote(regularProp[0])
                printValue = unquote(regularValue[0])
                {printProp} printValue
        if ( transformAvailable )
          transform transformProps
        if ( filterAvailable && length(filterProps) > 0 )
          filter filterProps
spring-to(options, strength, elasticity, props)
  optionsCheck = join(', ', options)
  customNameAvailable = true
  if (
    match('^\d|^cubic|^ease|^linear|^infinite|^normal|^alternate|^forwards|^backwards|^both|^steps\(|^continuous', optionsCheck)
  )
    customNameAvailable = false
  continuousAvailable = false
  if ( match('continuous', optionsCheck) )
    continuousAvailable = true
  if ( customNameAvailable )
    name = options[0]
  else
    selector = selector()
    selector = \
      replace(':before|:after|:hover|:active|:visited|:target', '', selector)
    selector = replace('.*[^a-zA-Z]+', '', selector)
    string = replace('\W', ' ', selector)
    name = unquote(selector)
  unless ( match('forwards|backwards|both', optionsCheck) )
    options = join(' ', options, 'forwards')
    options = unquote(options)
  if ( continuousAvailable )
    if ( match(':hover|:active', selector()) )
      options = join(' ', options)
      options = replace(' continuous|continuous ', '', options)
      options = unquote(options)
      selector = replace(':hover|:active', '', selector())
      / {selector}
        animation name 0ms 100ms
    else
      error('continuous is available only for :hover and :active pseudo selectors')
  if ( customNameAvailable )
    animation options
  else
    animation name options
  coefficient = ( (strength * elasticity) + ( (strength + elasticity) / 2 ) - ( (strength + elasticity) / 4 ) / 2 )
  coefficient = ( coefficient / (-100) )
  steps = strength
  @keyframes {name}
    for step, n in 1..steps
      percentage = 100 / steps * step
      percentage = round( percentage, 2 )
      percentage = percentage * 1%
      keyframeCheck = join(', ', props)
      transformAvailable = false
      if ( match('translate|\brotate|\bscale|skew', keyframeCheck) )
        transformAvailable = true
      filterAvailable = false
      if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', keyframeCheck) )
        filterAvailable = true
      {percentage}
        transformProps = {}
        filterProps = {}
        for prop, n in props
          propCheck = join(', ', prop)
          isTransform = false
          if ( match('^translate|^rotate|^scale|^skew ', propCheck) )
            isTransform = true
          isFilter = false
          if ( match('blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|saturate|sepia', propCheck) )
            isFilter = true
          if ( isTransform )
            split = split('(', '' + prop)
            transformValue = split(')', '' + split[1])
            transformValue = convert(transformValue)
            originalValue = @transform
            originalValue = split(split[0], '' + originalValue)
            originalValue = split('(', '' + originalValue[1])
            originalValue = split(')', '' + originalValue[1])
            originalValue = convert(originalValue)
            if ( originalValue == null )
              if ( split[0] == 'scale' )
                originalValue = 1
              else
                originalValue = 0
            if (transformValue == 0 && split[0] == 'scale' && percentage != '100%')
              transformValue = 0.01
            newValue = transformValue - ((originalValue - transformValue) * (coefficient ** step) * (-1))
            if (split[0] == 'scale')
              if ( transformValue <= 1 )
                newValue = transformValue + ((originalValue - transformValue) * (coefficient ** step))
            if ( percentage == '100%' )
              newValue = transformValue
            newValue = round( newValue, 2)
            newProp = join('', split[0], '(', newValue, ')')
            transformProps[n] = unquote(newProp)
          else
            transformProps[n] = unquote('')
            half = floor(steps/2)
            if ( step >= half )
              if ( isFilter )
                filterProps[n] = prop
              else
                filterProps[n] = unquote('')
                regularProp = split('(', '' + prop)
                regularValue = split(')', '' + regularProp[1])
                printProp = unquote(regularProp[0])
                printValue = unquote(regularValue[0])
                {printProp} printValue
        if ( transformAvailable )
          transform transformProps
        if ( filterAvailable && length(filterProps) > 0 )
          filter filterProps
states(options, props...)
  if length(options) > 1
    type = options[0]
    percentage = options[1]
  else
    type = options
    percentage = 20%
  &:hover
    for prop in props
      propCheck = create-string(prop)
      if match('background', propCheck)
        if @background
          background type(@background, percentage)
        else if @background-color
          background-color type(@background-color, percentage)
        else
          error('no background/background-color prop available')
      else if match('color', propCheck)
        if @color
          color type(@color, percentage)
        else
          error('no color prop available')
      else if match('border', propCheck)
        if @border
          for borderProp in @border
            propType = typeof(borderProp)
            if propType == 'rgba' || propType == 'hsla'
              border-color type(borderProp, percentage)
        else if @border-color
          border-color type(borderProp, percentage)
        else
          error('no border/border-color prop available')
  &:active
    for prop in props
      propCheck = create-string(prop)
      if match('background', propCheck)
        if @background
          background type(@background, (percentage/2) )
        else if @background-color
          background-color type(@background-color, (percentage/2) )
        else
          error('no background/background-color prop available')
      else if match('color', propCheck)
        if @color
          color type(@color, (percentage/2) )
        else
          error('no color prop available')
      else if match('border', propCheck)
        if @border
          for borderProp in @border
            propType = typeof(borderProp)
            if propType == 'rgba' || propType == 'hsla'
              border-color type(borderProp, (percentage/2) )
        else if @border-color
          border-color type(borderProp, (percentage/2) )
        else
          error('no border/border-color prop available')
text-background()
  @supports (-webkit-background-clip: text)
    background arguments
    -webkit-background-clip text
    -webkit-text-fill-color transparent
unsplash(size, options...)
  $optionsCheck = create-string(options)
  if (length(arguments) > 1 && !match('grayscale|blur|cache|cover|contain|fixed|center|repeat|no-repeat|repeat-x|repeat-y|top|right|bottom|left', $optionsCheck))
    size = arguments
    options = unquote('')
  if (length(size) > 1)
    $width  = size[0]
    $height = size[1]
  else if (length(size) == 1)
    $width  = size
    $height = size
  else
    error("Unsplash function supports up to 2 values as size.")
  $grayscale = unquote('')
  $blur = unquote('')
  $query = '?random='
  if (options)
    $options = create-string(options)
    $options = replace(',', '', $options)
    if (match('grayscale', $optionsCheck))
      $grayscale = 'g/'
      $options = replace('grayscale', '', $options)
      $options = replace('color', '', $options)
    if (match('blur', $optionsCheck))
      $blur = '&blur'
      $options = replace('blur', '', $options)
    if (match('cover', $optionsCheck))
      $cover = true
      $options = replace('cover', '', $options)
    if (match('contain', $optionsCheck))
      $contain = true
      $options = replace('contain', '', $options)
    if (match('fixed', $optionsCheck))
      $options = replace('fixed', 'unquote(fixed)', $options)
    if (!match('cover|contain|fixed|center|repeat|no-repeat|repeat-x|repeat-y|top|right|bottom|left', $optionsCheck))
      $cover = true
      $options = 'center'
  else
    $options = 'center'
    $cover = true
  $options = create-string($options)
  $options = create-val($options)
  $id = random(0,900)
  $url = add-quotes('https://unsplash.it/', $grayscale, $width, '/', $height, $query, $id, $blur)
  $url = create-val('url(',$url,')')
  $value = create-block('', $url, $options)
  $value = create-val($value)
  background $value
  if ($cover == true)
    background-size cover
  if ($contain == true)
    background-size contain
webkit()
  @media screen and (-webkit-min-device-pixel-ratio:0)
    {block}
