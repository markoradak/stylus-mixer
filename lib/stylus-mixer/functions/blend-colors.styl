/**
 * Blend Colors (blend-colots.styl)
 * --------------------------------
 * @author Marko Radak <mail@markoradak.com>
 * @since  0.1.0
 * @desc   Provides function that blends
 *         two given colors using one of the
 *         available blend modes.
 * @note   Idea borrowed from @pdaoust.
 *
 * @syntax
 *   blend-colors(<color>, <color>, <mode>, ?<amount>)
 *
 * @examples
 *   blend-colors($red, $blue, overlay, 50%)
 *   blend-colors($green, $yellow, multiply)
 */

blend-colors(color1, color2, mode = normal, amount = 0.5)

  // helper function for clipping a calculated color to 0 - 1 range
  clipcolor(color)
    if (color < 0)
      0
    else if (color > 1)
      1
    else
      color

  // helper function for calculating a premultiplied
  // color with its complementary alpha
  comp(color, alpha)
    color * (1 - alpha)

  // blending mode calculations â€¦

  normal(color1a, color2a, alpha1, alpha2)
    color2a + comp(color1a, alpha2)

  darken(color1a, color2a, alpha1, alpha2)
    min(color2a * alpha1, color1a * alpha2) + comp(color2a, alpha1) + comp(color1a, alpha2)

  multiply(color1a, color2a, alpha1, alpha2)
    color2a * color1a + comp(color2a, alpha1) + comp(color1a, alpha2)

  lighten(color1a, color2a, alpha1, alpha2)
    max(color2a * alpha1, color1a * alpha2) + comp(color2a, alpha1) + comp(color1a, alpha2)

  screen(color1a, color2a, alpha1, alpha2)
    color2a + color1a - color2a * color1a

  overlay(color1a, color2a, alpha1, alpha2)
    if (color1a * 2 <= alpha1)
      color2a * color1a * 2 + comp(color2a, alpha1) + comp(color1a, alpha2)
    else
      comp(color2a, alpha1) + comp(color1a, alpha2) - 2 * (alpha1 - color1a) * (alpha2 - color2a) +  alpha2 * alpha1

  // get 8-bit color values and convert to floats
  red1 = (red(color1) / 255)
  green1 = (green(color1) / 255)
  blue1 = (blue(color1) / 255)
  alpha1 = alpha(color1)
  red2 = (red(color2) / 255)
  green2 = (green(color2) / 255)
  blue2 = (blue(color2) / 255)
  alpha2 = alpha(color2)

  // convert amount to float if percentage
  if (amount)
    if (unit(amount) == '%')
      amount = unit(amount / 100, '')

  // adjust alpha2 with an amount
  alpha2 = amount * alpha2

  // calculate final alpha
  alpha3 = alpha1 + alpha2 - alpha1 * alpha2

  // premultiply RGB values for each color
  red1a = red1 * alpha1
  green1a = green1 * alpha1
  blue1a = blue1 * alpha1
  red2a = red2 * alpha2
  green2a = green2 * alpha2
  blue2a = blue2 * alpha2

  // define blending function
  blendfunc = normal
  blendfunc = darken if mode == darken
  blendfunc = multiply if mode == multiply
  blendfunc = lighten if mode == lighten
  blendfunc = screen if mode == screen
  blendfunc = overlay if mode == overlay

  // calculate the new colors
  red3a = blendfunc(red1a, red2a, alpha1, alpha2)
  green3a = blendfunc(green1a, green2a, alpha1, alpha2)
  blue3a = blendfunc(blue1a, blue2a, alpha1, alpha2)

  // take premultiplied RGB values for final color and derive actual
  // colors by un-multiplying them by the final alpha and clip each
  red3 = clipcolor(red3a / alpha3)
  green3 = clipcolor(green3a / alpha3)
  blue3 = clipcolor(blue3a / alpha3)

  rgba(round(red3 * 255), round(green3 * 255), round(blue3 * 255), alpha3)
