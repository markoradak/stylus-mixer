/**
 * Background Gradient (background-gradient.styl)
 * ----------------------------------------------
 * @author Marko Radak <@iammarkoradak>
 * @since  0.1.0
 * @desc   Provides gradient mixin with a couple
 *         of custom functions, as well as vendor
 *         prefixed values, and legacy support.
 *
 * @syntax
 *   background-gradient <options>, <origin>, <colors> ...
 *
 * @examples
 *   background-gradient linear, left, red, white
 *
 *   background-gradient \
 *     linear repeating mix,
 *     bottom left,
 *     0% #ff0000, 2% #ff0000,
 *     2% #ffffff, 4% #ffffff
 */

background-gradient(options, origin, colors...)

  // define start and end colors
  startColor = colors[0][0]
  endColor = colors[-1][0]

  // create color props list
  colors = create-list(colors)

  // configure inversed-origin
  if origin is a 'unit'
    inversedOrigin = origin

  else
    inversedOrigin = opposite-position(origin)
    inversedOrigin = create-prop('to ', inversedOrigin)

  // create options string
  opt = create-string(options)

  // radial
  if match('radial?', opt)
    prefixedVal = add-braces( join(', ', origin, 'circle', colors) )
    officialVal = add-braces( join(', ', circle at origin, colors) )

    // repeating
    if match('repeating?', opt)
      prefixed = create-prop('repeating-radial-gradient', prefixedVal)
      official = create-prop('repeating-radial-gradient', officialVal)

    // standard
    else
      prefixed = create-prop('radial-gradient', prefixedVal)
      official = create-prop('radial-gradient', officialVal)

  // linear (default)
  else
    prefixedVal = add-braces( join(', ', origin, colors) )
    officialVal = add-braces( join(', ', inversedOrigin, colors) )

    // repeating
    if match('repeating?', opt)
      prefixed = create-prop('repeating-linear-gradient', prefixedVal)
      official = create-prop('repeating-linear-gradient', officialVal)

    // standard
    else
      prefixed = create-prop('linear-gradient', prefixedVal)
      official = create-prop('linear-gradient', officialVal)

  // create gradient functions

  webkitGradientFunction()
    create-prop('-webkit-', prefixed)

  mozGradientFunction()
    create-prop('-moz-', prefixed)

  oGradientFunction()
    create-prop('-o-', prefixed)

  gradientFunction()
    create-prop(official)

  // determine if mix exists
  if (match('mix?', opt))
    mixAvailable = true
  else
    mixAvailable = false

  // mix
  mix = linear-gradient(\
    hsla( mix(startColor,endColor), 0.5),
    hsla( mix(startColor,endColor), 0.5))

  // create mix functions

  webkitMixFunction()
    create-prop('-webkit-', mix, ',') if mixAvailable

  mozMixFunction()
    create-prop('-moz-', mix, ',') if mixAvailable

  oMixFunction()
    create-prop('-o-', mix, ',') if mixAvailable

  mixFunction()
    create-prop(mix, ',') if mixAvailable

  // print out prefixed syntaxes

  if auto-prefix && prefix-webkit('gradient')
    background webkitMixFunction() webkitGradientFunction()

  if auto-prefix && prefix-moz('gradient')
    background mozMixFunction() mozGradientFunction()

  if auto-prefix && prefix-o('gradient')
    background oMixFunction() oGradientFunction()

  // print out standard syntax
  background mixFunction() gradientFunction()

  // legacy fallback
  hex(startColor)
    hexValue = ('0') ('1') ('2') ('3') ('4') ('5') ('6') ('7') ('8') ('9') ('A') ('B') ('C') ('D') ('E') ('F')
    unquote(hexValue[floor(startColor / 16)] + hexValue[floor(startColor % 16)])

  argb(startColor)
    unquote('#') + hex((alpha(startColor)) * 255) + hex(red(startColor)) + hex(green(startColor)) + hex(blue(startColor))

  hex(endColor)
    hexValue = ('0') ('1') ('2') ('3') ('4') ('5') ('6') ('7') ('8') ('9') ('A') ('B') ('C') ('D') ('E') ('F')
    unquote(hexValue[floor(endColor / 16)] + hexValue[floor(endColor % 16)])

  argb(endColor)
    unquote('#') + hex((alpha(endColor)) * 255) + hex(red(endColor)) + hex(green(endColor)) + hex(blue(endColor))

  ieStartColor = argb(startColor)
  ieEndColor = argb(endColor)

  if (origin == top) || (origin == bottom)
    filterSource = s('progid:DXImageTransform.Microsoft.gradient(start-colorstr=%s,end-colorstr=%s),GradientType=0', ieStartColor, ieEndColor)
  else
    filterSource = s('progid:DXImageTransform.Microsoft.gradient(start-colorstr=%s,end-colorstr=%s),GradientType=0', ieStartColor, ieEndColor)

  // print out legacy fallback
  if legacySupport
    -ms-filter add-quotes(filterSource)
