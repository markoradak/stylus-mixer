/**
 * Blend Colors (blend-colots.styl)
 * --------------------------------
 * @author Marko Radak <mail@markoradak.com>
 * @since  0.1.0
 * @desc   Provides function that blends
 *         two given colors using one of the
 *         available blend $modes.
 * @note   Idea borrowed from @pdaoust.
 *
 * @syntax
 *   blend-colors(<color>, <color>, ?<mode>, ?<amount>)
 *
 * @examples
 *   blend-colors($red, $blue, overlay, 50%)
 *   blend-colors($green, $yellow, multiply)
 */

blend-colors($colorA, $colorB, $mode = normal, $amount = 0.5)

  // helper function for clipping a calculated color to 0 - 1 range
  __clipcolor($color)
    if ($color < 0)
      0
    else if ($color > 1)
      1
    else
      $color

  // helper function for calculating a premultiplied
  // color with its complementary alpha
  __comp($color, $alpha)
    $color * (1 - $alpha)

  // blending mode calculations â€¦

  __normal($colorAa, $colorBa, $alpha1, $alpha2)
    $colorBa + __comp($colorAa, $alpha2)

  __darken($colorAa, $colorBa, $alpha1, $alpha2)
    min($colorBa * $alpha1, $colorAa * $alpha2) + __comp($colorBa, $alpha1) + __comp($colorAa, $alpha2)

  __multiply($colorAa, $colorBa, $alpha1, $alpha2)
    $colorBa * $colorAa + __comp($colorBa, $alpha1) + __comp($colorAa, $alpha2)

  __lighten($colorAa, $colorBa, $alpha1, $alpha2)
    max($colorBa * $alpha1, $colorAa * $alpha2) + __comp($colorBa, $alpha1) + __comp($colorAa, $alpha2)

  screen($colorAa, $colorBa, $alpha1, $alpha2)
    $colorBa + $colorAa - $colorBa * $colorAa

  __overlay($colorAa, $colorBa, $alpha1, $alpha2)
    if ($colorAa * 2 <= $alpha1)
      $colorBa * $colorAa * 2 + __comp($colorBa, $alpha1) + __comp($colorAa, $alpha2)
    else
      __comp($colorBa, $alpha1) + __comp($colorAa, $alpha2) - 2 * ($alpha1 - $colorAa) * ($alpha2 - $colorBa) +  $alpha2 * $alpha1

  // get 8-bit color values and convert to floats
  $red1 = (red($colorA) / 255)
  $green1 = (green($colorA) / 255)
  $blue1 = (blue($colorA) / 255)
  $alpha1 = alpha($colorA)
  $red2 = (red($colorB) / 255)
  $green2 = (green($colorB) / 255)
  $blue2 = (blue($colorB) / 255)
  $alpha2 = alpha($colorB)

  // convert amount to float if percentage
  if ($amount)
    if (unit($amount) == '%')
      $amount = unit($amount / 100, '')

  // adjust $alpha2 with an $amount
  $alpha2 = $amount * $alpha2

  // calculate final alpha
  $alpha3 = $alpha1 + $alpha2 - $alpha1 * $alpha2

  // premultiply RGB values for each color
  $red1a = $red1 * $alpha1
  $green1a = $green1 * $alpha1
  $blue1a = $blue1 * $alpha1
  $red2a = $red2 * $alpha2
  $green2a = $green2 * $alpha2
  $blue2a = $blue2 * $alpha2

  // define blending function
  __blendfunc = __normal
  __blendfunc = __darken if $mode == darken
  __blendfunc = __multiply if $mode == multiply
  __blendfunc = __lighten if $mode == lighten
  __blendfunc = __screen if $mode == screen
  __blendfunc = __overlay if $mode == overlay

  // calculate the new colors
  $red3a = __blendfunc($red1a, $red2a, $alpha1, $alpha2)
  $green3a = __blendfunc($green1a, $green2a, $alpha1, $alpha2)
  $blue3a = __blendfunc($blue1a, $blue2a, $alpha1, $alpha2)

  // take premultiplied RGB values for final color and derive actual
  // colors by un-multiplying them by the final alpha and clip each
  $red3 = __clipcolor($red3a / $alpha3)
  $green3 = __clipcolor($green3a / $alpha3)
  $blue3 = __clipcolor($blue3a / $alpha3)

  rgba(round($red3 * 255), round($green3 * 255), round($blue3 * 255), $alpha3)
